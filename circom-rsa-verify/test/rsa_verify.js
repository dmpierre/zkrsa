const chai = require("chai");
const path = require("path");
const snarkjs = require("snarkjs");
const bigInt = require("big-integer");
const assert = chai.assert;

const compiler = require("circom");

const { splitToWords, assertWitnessHas } = require("./util.js");

chai.should();

describe("Rsa pkcs1v15 verify", () => {
    var rsa_pkvs1v15_circuit;

    before(async () => {
        let cirDef = await compiler(path.join(__dirname, "circuits", "rsa_verify.circom"));
        rsa_pkvs1v15_circuit = new snarkjs.Circuit(cirDef);
    });


    it("2048 bits public key. correct sign. 1", () => {
        // public key params. decimal
        // const modulus = bigInt("24226501697440012621102249466312043787685293040734225606346036389705515508545746221669035424138747582133889500686654172873671086178893587422987328751464627501601101326475761646014534358699943642495332701081302954020983110372109611581202820849485662540890985814355975252780310958088652613376767040069489530039075302709233494829280591680666351811024913107949144932224439129715181798714328219977771472462901856297952813239115577652450722815852332547886777292613005505949100406231716599634852632308325816916535875123863510650526931916871614411907700873376659841257216885666098127478325534982891697988739616416855214839339");
        const exp = bigInt(65537);
        // signature. decimal
        const modulus = bigInt("19519656709521711429995139570547637181624762345324681785580301433588578378976966544165585079401325182615959394866402724247835200419210171384906228922984432351987054912642033888228862743737229361716981611335688010406392740956095932032128322466964202114087152883670346149379400227222916089973767149942678375161844533695413249493781659113508618075245377182482183926262306924673460477726816132619589117118686140127946600027192273556577984708113826100980891561591927374578519390433856317958492213293246054621642838485415189189708020272151599126098965668920960197306467800450624437168334563149867960568978175974911770644043");
        // const sign = bigInt("18928545496959756512579438348223103860103247450097569223971486743312798156950374943336714741350742176674694049986481729075548718599712271054643150030165230392897481507710187505775911256946250999396358633095137650326818007610162375520522758780751710735664264200260854016867498935206556916247099180950775474524799944404833222133011134000549939512938205188018503377612813102061504146765520561811620128786062447005833886367575841545493555268747671930923697279690399480501746857825917608323993022396398648205737336204493624060285359455268389160802763426461171262704764369336704988874821898000892148693988241020931055723252");
        const sign = bigInt("18519413668282313530131997444544340850073620641877474693732612923133913245075525024960156829644289238504103501567397968180045457914513699207360909317047448265537558209931516041220213380485055317892660643047402260178446676527589466628914994871817454357096262507299305662674661072917824223693871712826261322530380635166572948674090951224993714002393850119230963745313576434028274886145226699206192128504349141865259386563696313153598850003313320010544755512487148878264280144487955893567709755037425603476095352711045167095964851359444560909860196680830409408298067784727737140263880998968241893614784855717084522255107");
        // hashed data. decimal
        const hashed = bigInt("83814198383102558219731078260892729932246618004265700685467928187377105751529");

        const input = Object.assign({},
            splitToWords(sign, 64, 32, "sign"),
            splitToWords(exp, 64, 32, "exp"),
            splitToWords(modulus, 64, 32, "modulus"),
            splitToWords(hashed, 64, 4, "hashed"),
        );

        const witness = rsa_pkvs1v15_circuit.calculateWitness(input);
    });

    it("2048 bits public key. correct sign. 2", () => {
         // public key params. decimal
        const modulus = bigInt("24226501697440012621102249466312043787685293040734225606346036389705515508545746221669035424138747582133889500686654172873671086178893587422987328751464627501601101326475761646014534358699943642495332701081302954020983110372109611581202820849485662540890985814355975252780310958088652613376767040069489530039075302709233494829280591680666351811024913107949144932224439129715181798714328219977771472462901856297952813239115577652450722815852332547886777292613005505949100406231716599634852632308325816916535875123863510650526931916871614411907700873376659841257216885666098127478325534982891697988739616416855214839339");
        const exp = bigInt(65537);
        // signature. decimal
        const sign = bigInt("18928545496959757512579438348223103860103247450097569223971486743312798156950374943336714741350742176674694049986481729075548718599712271054643150030165230392897481507710187505775911256946250999396358633095137650326818007610162375520522758780751710735664264200260854016867498935206556916247099180950775474524799944404833222133011134000549939512938205188018503377612813102061504146765520561811620128786062447005833886367575841545493555268747671930923697279690399480501746857825917608323993022396398648205737336204493624060285359455268389160802763426461171262704764369336704988874821898000892148693988241020931055723252");
        // hashed data. decimal
        const hashed = bigInt("83814198383102558219731078260892729932246618004265700685467928187377105751529");

        const input = Object.assign({},
            splitToWords(sign, 64, 32, "sign"),
            splitToWords(exp, 64, 32, "exp"),
            splitToWords(modulus, 64, 32, "modulus"),
            splitToWords(hashed, 64, 4, "hashed"),
        );

        const witness = rsa_pkvs1v15_circuit.calculateWitness(input);
    });

    it("2048 bits public key. uncorrect sign. ", () => {
        // public key params. decimal
        const modulus = bigInt("24226501697440012621102249466312043787685293040734225606346036389705515508545746221669035424138747582133889500686654172873671086178893587422987328751464627501601101326475761646014534358699943642495332701081302954020983110372109611581202820849485662540890985814355975252780310958088652613376767040069489530039075302709233494829280591680666351811024913107949144932224439129715181798714328219977771472462901856297952813239115577652450722815852332547886777292613005505949100406231716599634852632308325816916535875123863510650526931916871614411907700873376659841257216885666098127478325534982891697988739616416855214839339");
        const exp = bigInt(65537);
        // signature. decimal
        const sign = bigInt("18928545496959756512579438348223103860103247450097569223971486743312798156950374943336714741350742176674694049986481729075548718599712271054643150030165230392897481507710187505775911256946250999396358633095137650326818007610162375520522758780751710735664264200260854016867498935206556916247099180950775474524799944404833222133011134000549939512938205188018503377612813102061504146765520561811620128786062447005833886367575841545493555268747671930923697279690399480501746857825917608323993022396398648205737336204493624060285359455268389160802763426461171262704764369336704988874821898000892148693988241020931055723252");
        // hashed data. decimal
        const hashed = bigInt("83814198383102558219731078260892729932246618004265700685467928187377105751529");
        const input = Object.assign({},
            splitToWords(sign, 64, 32, "sign"),
            splitToWords(exp, 64, 32, "exp"),
            splitToWords(modulus, 64, 32, "modulus"),
            splitToWords(hashed, 64, 4, "hashed"),
        );
        
        (function () {
            const witness = rsa_pkvs1v15_circuit.calculateWitness(input);
        }.should.throw());
        
    });
});

