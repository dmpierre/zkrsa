const chai = require("chai");
const path = require("path");
const snarkjs = require("snarkjs");
const bigInt = require("big-integer");
const assert = chai.assert;

const compiler = require("circom");

const { splitToWords, assertWitnessHas } = require("./util.js");

chai.should();

describe("PowerMod", () => {

    var powmod_2048_256;
    //var powmod_2048_256;
    var p8 = bigInt("27333278531038650284292446400685983964543820405055158402397263907659995327446166369388984969315774410223081038389734916442552953312548988147687296936649645550823280957757266695625382122565413076484125874545818286099364801140117875853249691189224238587206753225612046406534868213180954324992542640955526040556053150097561640564120642863954208763490114707326811013163227280580130702236406906684353048490731840275232065153721031968704703853746667518350717957685569289022049487955447803273805415754478723962939325870164033644600353029240991739641247820015852898600430315191986948597672794286676575642204004244219381500407");

    before(async () => {  
        let cirDef = await compiler(path.join(__dirname, "circuits", "pow_mod.circom"));
        powmod_2048_256 = new snarkjs.Circuit(cirDef);
    });

    it("should compute powmod_2048_256) (64 bits, 32 words in base, exp = 65537)", () => {
        const m = p8;
        const b = bigInt("27166015521685750287064830171899789431519297967327068200526003963687696216659347317736779094212876326032375924944649760206771585778103092909024744594654706678288864890801000499430246054971129440518072676833029702477408973737931913964693831642228421821166326489172152903376352031367604507095742732994611253344812562891520292463788291973539285729019102238815435155266782647328690908245946607690372534644849495733662205697837732960032720813567898672483741410294744324300408404611458008868294953357660121510817012895745326996024006347446775298357303082471522757091056219893320485806442481065207020262668955919408138704593");
        const e = bigInt(65537);
        const input = Object.assign({},
            splitToWords(b, 64, 32, "base"),
            splitToWords(e, 64, 32, "exp"),
            splitToWords(m, 64, 32, "modulus"),
        );

        
        const witness = powmod_2048_256.calculateWitness(input);
        const expected = b.modPow(e, m);
        // console.log("expected----->", expected.toString());
        assertWitnessHas(powmod_2048_256, witness, "out", expected, 64, 32);
    });
});

